1. doOnTerminate()
Этот метод выполняет действие, когда запрос завершен, независимо от того, был ли он успешным или произошла ошибка.

Когда вызывается: После завершения запроса, либо с успешным ответом, либо с ошибкой.
Для чего используется: Это полезно, когда нужно выполнить какое-то действие в конце запроса — например, очистку ресурсов, логирование о завершении запроса, или дополнительные действия, которые должны происходить независимо от результата запроса.
Пример:

java
Копировать
Редактировать
.doOnTerminate(() -> log.info("Запрос завершен"))
Этот код будет логировать информацию о завершении запроса, как бы он не закончился.

2. doOnRequest()
Этот метод срабатывает до того, как запрос фактически будет отправлен. Он позволяет выполнить какое-то действие сразу перед отправкой запроса, например, добавить заголовки, логировать запрос или изменять параметры.

Когда вызывается: Когда запрос еще не отправлен, но мы имеем доступ к объекту запроса.
Для чего используется: Обычно используется для логирования или изменения запроса перед его отправкой, например, добавление кастомных заголовков или параметров.
Пример:

java
Копировать
Редактировать
.doOnRequest((request, next) -> log.info("Отправка запроса: {} {}", request.method(), request.url()))
Этот код будет логировать информацию о методе и URL запроса перед его отправкой.

3. doOnSuccess()
Этот метод выполняет действие, когда запрос был успешно завершен (т.е. сервер ответил с успешным статусом, например, 2xx).

Когда вызывается: После того, как запрос завершился успешно.
Для чего используется: Обычно используется для логирования успешного выполнения запроса, обработки успешного ответа или выполнения каких-то действий при успешном ответе от сервера.
Пример:

java
Копировать
Редактировать
.doOnSuccess(response -> log.info("Запрос выполнен успешно: {}", response))
Этот код будет логировать успешный ответ после того, как сервер вернет успешный статус.

Почему мы логируем ошибку в onStatus() и не используем onError()
onStatus() используется для обработки ошибок, которые зависят от статуса ответа. Например, если сервер вернул статус 4xx или 5xx (ошибку), то это будет обработано в onStatus.

Важно отметить, что onStatus() позволяет детально обработать ошибки на основе статуса HTTP-ответа (например, ошибка 404 или 500), и мы можем взять тело ошибки, десериализовать его и обработать его в виде исключения.

Пример:

java
Копировать
Редактировать
.onStatus(HttpStatus::isError, response -> 
    response.bodyToMono(DepositErrorResponse.class)  
        .flatMap(errorResponse -> Mono.error(new DepositException(errorResponse)))  // Преобразуем ошибку в исключение
)
Этот код проверяет, есть ли ошибка по статусу (например, 4xx или 5xx) и обрабатывает тело ошибки (например, если сервер вернул ошибку с сообщением).

onError() применяется в контексте обработки ошибок, которые произошли в процессе выполнения — например, при сетевых ошибках, тайм-аутах, исключениях и т. п. Это ошибки, которые не зависят от статуса HTTP-ответа, а скорее от проблем с соединением или другими техническими сбоями.
Пример использования onError():

java
Копировать
Редактировать
.onErrorResume(e -> {
    log.error("Произошла ошибка: {}", e.getMessage());
    return Mono.empty();  // Возвращаем пустое значение в случае ошибки
})
onError() чаще используется для обработки исключений, которые возникают на уровне выполнения (например, сетевые ошибки, тайм-ауты, и т.д.).

Почему используем onStatus() для логирования ошибки
Контекст статуса: Ошибки, с которыми мы имеем дело в onStatus(), зависят от HTTP-статуса, то есть это ошибка, которую сервер возвращает (например, неправильные данные, несуществующий ресурс, внутренние ошибки сервера). Эти ошибки мы обрабатываем путем извлечения информации из тела ответа и выбрасывания исключения.

Обработка конкретных ошибок: В onStatus() можно фильтровать ошибки по статусу и реализовывать логику, основанную на статусе ответа. Например, если сервер вернул ошибку 400 или 500, то можно выполнить специальную логику (например, попробовать повторить запрос или вернуть детализированную ошибку).

onError() же больше подходит для обработки исключений, которые происходят в процессе обработки запроса, но не зависят от статуса ответа (например, сетевые ошибки).
