Исходный код
java
Копировать
Редактировать
webClient.post()  // Создаем POST-запрос.
    .uri("/api/deposit")  // Указываем URI для запроса.
    .doOnRequest((request, next) -> log.info("Отправка запроса: {} {}", request.method(), request.url()))  // Логируем начало отправки запроса.
    .bodyValue(request)  // Добавляем тело запроса.
    .retrieve()  // Выполняем запрос.
    .onStatus(HttpStatus::isError, response ->  // 1. Обработка ошибок при получении ответа с ошибкой.
        response.bodyToMono(DepositErrorResponse.class)  // 2. Десериализация тела ошибки в объект DepositErrorResponse.
                .doOnTerminate(() -> log.error("Ошибка при обработке депозита"))  // 3. Логируем ошибку при завершении.
                .flatMap(errorResponse -> Mono.error(new DepositException(errorResponse)))  // 4. Преобразуем ошибку в исключение DepositException.
    )
    .doOnSuccess(response -> log.info("Запрос выполнен успешно: {}", response))  // 5. Логируем успешное выполнение запроса.
    .bodyToMono(DepositResponse.class)  // 6. Десериализуем успешный ответ в объект DepositResponse.
    .doOnTerminate(() -> log.info("Запрос завершен."))  // 7. Логируем завершение запроса (независимо от того, успешный он или нет).
    .timeout(Duration.ofSeconds(5))  // 8. Таймаут запроса через 5 секунд.
    .retryWhen(Retry.fixedDelay(3, Duration.ofSeconds(2)))  // 9. Повторная попытка запроса через 2 секунды, максимум 3 раза.
    .onErrorResume(e -> {  // 10. Обработка ошибок, таких как тайм-ауты.
        if (e instanceof TimeoutException) {
            log.error("Тайм-аут при выполнении запроса: {}", e.getMessage());  // 11. Логируем тайм-аут.
        } else {
            log.error("Ошибка при выполнении запроса: {}", e.getMessage());  // 12. Логируем другие ошибки.
        }
        return Mono.empty();  // 13. Возвращаем пустой Mono, чтобы продолжить выполнение.
    })
    .block();  // 14. Ожидаем выполнения запроса.
Пошаговое объяснение
Создание POST-запроса и установка URI:
Мы создаем POST-запрос и устанавливаем URI (/api/deposit). Это базовая настройка для отправки запроса.

doOnRequest:
Этот метод выполняется до отправки запроса. В нем мы логируем информацию о методе запроса и URL, куда отправляется запрос. Он выполняется до того, как запрос будет отправлен на сервер.

Добавление тела запроса:
Здесь мы передаем тело запроса с помощью метода .bodyValue(request). Этот шаг тоже происходит до того, как запрос будет отправлен.

retrieve() и отправка запроса:
Этот метод инициирует выполнение запроса и начинает ожидать ответ. Он отправляет запрос на сервер.

onStatus(HttpStatus::isError, response -> {...}) — Обработка ошибки:
Этот блок срабатывает в случае ошибки в ответе сервера. Например, если сервер возвращает статус 4xx или 5xx (ошибка клиента или сервера).

Внутри этого блока происходит десериализация тела ошибки в объект DepositErrorResponse, с помощью метода response.bodyToMono(DepositErrorResponse.class).
После десериализации вызывается doOnTerminate, который логирует ошибку. Это сработает в любом случае, независимо от того, была ли ошибка или нет, потому что doOnTerminate срабатывает всегда при завершении асинхронной операции.
Затем ошибка преобразуется в исключение с помощью Mono.error(new DepositException(errorResponse)). После этого мы выходим из потока и возвращаем ошибку, которая будет выброшена и передана дальше в обработку.
doOnSuccess — Логирование успешного запроса:
Этот блок выполняется, если запрос выполнен успешно и сервер возвращает успешный ответ (например, код 2xx). Он логирует успешное выполнение запроса и сам ответ.

Десериализация успешного ответа:
Если запрос был успешным, мы десериализуем ответ в объект DepositResponse.

doOnTerminate — Завершение запроса:
Этот метод срабатывает в конце запроса, независимо от того, была ли ошибка или запрос прошел успешно. Он логирует факт завершения запроса. Это делается для того, чтобы иметь единое место для завершения логирования после выполнения запроса.

Тайм-аут с timeout(Duration.ofSeconds(5)):
Этот метод устанавливает максимальное время выполнения запроса. Если запрос не будет выполнен в течение 5 секунд, возникнет исключение TimeoutException. Это исключение будет передано в блок обработки ошибок (onErrorResume).

Повтор запроса с retryWhen:
Если произошла ошибка, то будет произведена повторная попытка запроса. В данном примере запрос будет повторен максимум 3 раза, с задержкой в 2 секунды между попытками.

onErrorResume — Обработка ошибок (например, тайм-аут):
Этот метод срабатывает, если произошла ошибка, например, тайм-аут. В нем мы проверяем тип ошибки с помощью instanceof TimeoutException и логируем её. Вы можете обработать ошибку по своему усмотрению, например, повторить запрос или выполнить другие действия.

Если ошибка произошла, но не является тайм-аутом, то сработает блок else, где логируется другая ошибка.
Важно отметить, что в onErrorResume можно вернуть другой поток, например, Mono.empty(). Это позволяет избежать дальнейшей обработки ошибки, и в результате поток будет завершен.
Ожидание выполнения запроса с block():
Метод block() блокирует выполнение потока и ожидает завершения запроса. Если запрос выполнен успешно, то возвращается результат. Если произошла ошибка, она будет обработана в onStatus или onErrorResume.

Ключевые моменты: когда что срабатывает?
Если запрос завершился с ошибкой (например, сервер вернул ошибку 4xx или 5xx):

Мы попадаем в блок onStatus, где десериализуем ошибку и логируем её.
После этого вызывается doOnTerminate, где логируется факт завершения операции.
Ошибка передается дальше в виде исключения (например, DepositException).
Если запрос успешен (например, сервер вернул код 2xx):

Срабатывает doOnSuccess, где логируется успешный ответ.
Затем происходит десериализация ответа в объект DepositResponse.
После этого срабатывает doOnTerminate, где логируется завершение запроса.
Если происходит ошибка в процессе выполнения запроса (например, тайм-аут):

Тайм-аут обрабатывается в onErrorResume. Мы можем логировать ошибку и решать, что делать дальше.
В зависимости от ситуации, можно вернуть пустой Mono.empty(), что завершит процесс. В случае тайм-аута можно предпринять повторные попытки через retryWhen.
Примерная логика в случае ошибки:
Ошибка возникла — мы попали в onStatus.
Мы логируем ошибку и создаем исключение, которое передаем в поток.
Далее поток передает ошибку дальше в doOnTerminate, где логируется завершение запроса.
Если ошибка произошла из-за тайм-аута, она попадет в onErrorResume, где мы можем решить, что делать дальше (например, повторить запрос или завершить обработку).
Примерный сценарий для тайм-аута:
Тайм-аут произошел — срабатывает timeout().
Мы попадаем в onErrorResume и логируем тайм-аут.
Если решили повторить запрос, то срабатывает retryWhen, и запрос повторяется.
Если превышены максимальные попытки или решение не повторять запрос, то срабатывает Mono.empty(), и запрос завершается.
